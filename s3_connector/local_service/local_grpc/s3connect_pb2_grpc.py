# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import s3connect_pb2 as s3connect__pb2


class s3connectStub(object):
    """Interface exported by the server.
    s3connect RPC

    get a files from S3 and download to specific location.
    the downlad location is shared volume or directory between services. 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DownloadFilesToLocation = channel.unary_unary(
                '/s3connect.s3connect/DownloadFilesToLocation',
                request_serializer=s3connect__pb2.S3request.SerializeToString,
                response_deserializer=s3connect__pb2.S3response.FromString,
                )
        self.GetFiles = channel.unary_stream(
                '/s3connect.s3connect/GetFiles',
                request_serializer=s3connect__pb2.S3request.SerializeToString,
                response_deserializer=s3connect__pb2.S3FilesResponse.FromString,
                )


class s3connectServicer(object):
    """Interface exported by the server.
    s3connect RPC

    get a files from S3 and download to specific location.
    the downlad location is shared volume or directory between services. 

    """

    def DownloadFilesToLocation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFiles(self, request, context):
        """A server-to-client streaming RPC.

        Get files from s3 and stream back to client 
        streamed rather than returned at once 

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_s3connectServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DownloadFilesToLocation': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadFilesToLocation,
                    request_deserializer=s3connect__pb2.S3request.FromString,
                    response_serializer=s3connect__pb2.S3response.SerializeToString,
            ),
            'GetFiles': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFiles,
                    request_deserializer=s3connect__pb2.S3request.FromString,
                    response_serializer=s3connect__pb2.S3FilesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            's3connect.s3connect', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class s3connect(object):
    """Interface exported by the server.
    s3connect RPC

    get a files from S3 and download to specific location.
    the downlad location is shared volume or directory between services. 

    """

    @staticmethod
    def DownloadFilesToLocation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/s3connect.s3connect/DownloadFilesToLocation',
            s3connect__pb2.S3request.SerializeToString,
            s3connect__pb2.S3response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/s3connect.s3connect/GetFiles',
            s3connect__pb2.S3request.SerializeToString,
            s3connect__pb2.S3FilesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
