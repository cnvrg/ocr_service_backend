# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ocrservice_pb2 as ocrservice__pb2


class ocrserviceStub(object):
    """Interface exported by the server.
    A simple RPC.

    Obtain text from pfd and image documents. 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessInfra = channel.unary_stream(
                '/ocrservice.ocrservice/ProcessInfra',
                request_serializer=ocrservice__pb2.OCRrequestInference.SerializeToString,
                response_deserializer=ocrservice__pb2.OCRresponse.FromString,
                )
        self.ProcessBatch = channel.unary_stream(
                '/ocrservice.ocrservice/ProcessBatch',
                request_serializer=ocrservice__pb2.OCRrequestBatch.SerializeToString,
                response_deserializer=ocrservice__pb2.OCRresponse.FromString,
                )
        self.ProcessUpload = channel.stream_stream(
                '/ocrservice.ocrservice/ProcessUpload',
                request_serializer=ocrservice__pb2.OCRuploadFiles.SerializeToString,
                response_deserializer=ocrservice__pb2.OCRresponse.FromString,
                )


class ocrserviceServicer(object):
    """Interface exported by the server.
    A simple RPC.

    Obtain text from pfd and image documents. 

    """

    def ProcessInfra(self, request, context):
        """
        Process a direct request document sent via s3, filename located on shared storage
        or direcct file public url
        stream the respose back as a json file. 

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessUpload(self, request_iterator, context):
        """client upload file firectly 

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ocrserviceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessInfra': grpc.unary_stream_rpc_method_handler(
                    servicer.ProcessInfra,
                    request_deserializer=ocrservice__pb2.OCRrequestInference.FromString,
                    response_serializer=ocrservice__pb2.OCRresponse.SerializeToString,
            ),
            'ProcessBatch': grpc.unary_stream_rpc_method_handler(
                    servicer.ProcessBatch,
                    request_deserializer=ocrservice__pb2.OCRrequestBatch.FromString,
                    response_serializer=ocrservice__pb2.OCRresponse.SerializeToString,
            ),
            'ProcessUpload': grpc.stream_stream_rpc_method_handler(
                    servicer.ProcessUpload,
                    request_deserializer=ocrservice__pb2.OCRuploadFiles.FromString,
                    response_serializer=ocrservice__pb2.OCRresponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ocrservice.ocrservice', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ocrservice(object):
    """Interface exported by the server.
    A simple RPC.

    Obtain text from pfd and image documents. 

    """

    @staticmethod
    def ProcessInfra(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ocrservice.ocrservice/ProcessInfra',
            ocrservice__pb2.OCRrequestInference.SerializeToString,
            ocrservice__pb2.OCRresponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ocrservice.ocrservice/ProcessBatch',
            ocrservice__pb2.OCRrequestBatch.SerializeToString,
            ocrservice__pb2.OCRresponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessUpload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/ocrservice.ocrservice/ProcessUpload',
            ocrservice__pb2.OCRuploadFiles.SerializeToString,
            ocrservice__pb2.OCRresponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
