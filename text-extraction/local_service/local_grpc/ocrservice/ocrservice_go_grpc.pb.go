// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protos/ocrservice_go.proto

package ocrservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcrserviceClient is the client API for Ocrservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcrserviceClient interface {
	ProcessInfra(ctx context.Context, in *OCRrequestInference, opts ...grpc.CallOption) (Ocrservice_ProcessInfraClient, error)
	ProcessBatch(ctx context.Context, in *OCRrequestBatch, opts ...grpc.CallOption) (Ocrservice_ProcessBatchClient, error)
	ProcessUpload(ctx context.Context, opts ...grpc.CallOption) (Ocrservice_ProcessUploadClient, error)
}

type ocrserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewOcrserviceClient(cc grpc.ClientConnInterface) OcrserviceClient {
	return &ocrserviceClient{cc}
}

func (c *ocrserviceClient) ProcessInfra(ctx context.Context, in *OCRrequestInference, opts ...grpc.CallOption) (Ocrservice_ProcessInfraClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ocrservice_ServiceDesc.Streams[0], "/ocrservice.ocrservice/ProcessInfra", opts...)
	if err != nil {
		return nil, err
	}
	x := &ocrserviceProcessInfraClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ocrservice_ProcessInfraClient interface {
	Recv() (*OCRresponse, error)
	grpc.ClientStream
}

type ocrserviceProcessInfraClient struct {
	grpc.ClientStream
}

func (x *ocrserviceProcessInfraClient) Recv() (*OCRresponse, error) {
	m := new(OCRresponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ocrserviceClient) ProcessBatch(ctx context.Context, in *OCRrequestBatch, opts ...grpc.CallOption) (Ocrservice_ProcessBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ocrservice_ServiceDesc.Streams[1], "/ocrservice.ocrservice/ProcessBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &ocrserviceProcessBatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ocrservice_ProcessBatchClient interface {
	Recv() (*OCRresponse, error)
	grpc.ClientStream
}

type ocrserviceProcessBatchClient struct {
	grpc.ClientStream
}

func (x *ocrserviceProcessBatchClient) Recv() (*OCRresponse, error) {
	m := new(OCRresponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ocrserviceClient) ProcessUpload(ctx context.Context, opts ...grpc.CallOption) (Ocrservice_ProcessUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ocrservice_ServiceDesc.Streams[2], "/ocrservice.ocrservice/ProcessUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &ocrserviceProcessUploadClient{stream}
	return x, nil
}

type Ocrservice_ProcessUploadClient interface {
	Send(*OCRuploadFiles) error
	Recv() (*OCRresponse, error)
	grpc.ClientStream
}

type ocrserviceProcessUploadClient struct {
	grpc.ClientStream
}

func (x *ocrserviceProcessUploadClient) Send(m *OCRuploadFiles) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ocrserviceProcessUploadClient) Recv() (*OCRresponse, error) {
	m := new(OCRresponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OcrserviceServer is the server API for Ocrservice service.
// All implementations must embed UnimplementedOcrserviceServer
// for forward compatibility
type OcrserviceServer interface {
	ProcessInfra(*OCRrequestInference, Ocrservice_ProcessInfraServer) error
	ProcessBatch(*OCRrequestBatch, Ocrservice_ProcessBatchServer) error
	ProcessUpload(Ocrservice_ProcessUploadServer) error
	mustEmbedUnimplementedOcrserviceServer()
}

// UnimplementedOcrserviceServer must be embedded to have forward compatible implementations.
type UnimplementedOcrserviceServer struct {
}

func (UnimplementedOcrserviceServer) ProcessInfra(*OCRrequestInference, Ocrservice_ProcessInfraServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessInfra not implemented")
}
func (UnimplementedOcrserviceServer) ProcessBatch(*OCRrequestBatch, Ocrservice_ProcessBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessBatch not implemented")
}
func (UnimplementedOcrserviceServer) ProcessUpload(Ocrservice_ProcessUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessUpload not implemented")
}
func (UnimplementedOcrserviceServer) mustEmbedUnimplementedOcrserviceServer() {}

// UnsafeOcrserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcrserviceServer will
// result in compilation errors.
type UnsafeOcrserviceServer interface {
	mustEmbedUnimplementedOcrserviceServer()
}

func RegisterOcrserviceServer(s grpc.ServiceRegistrar, srv OcrserviceServer) {
	s.RegisterService(&Ocrservice_ServiceDesc, srv)
}

func _Ocrservice_ProcessInfra_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OCRrequestInference)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OcrserviceServer).ProcessInfra(m, &ocrserviceProcessInfraServer{stream})
}

type Ocrservice_ProcessInfraServer interface {
	Send(*OCRresponse) error
	grpc.ServerStream
}

type ocrserviceProcessInfraServer struct {
	grpc.ServerStream
}

func (x *ocrserviceProcessInfraServer) Send(m *OCRresponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Ocrservice_ProcessBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OCRrequestBatch)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OcrserviceServer).ProcessBatch(m, &ocrserviceProcessBatchServer{stream})
}

type Ocrservice_ProcessBatchServer interface {
	Send(*OCRresponse) error
	grpc.ServerStream
}

type ocrserviceProcessBatchServer struct {
	grpc.ServerStream
}

func (x *ocrserviceProcessBatchServer) Send(m *OCRresponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Ocrservice_ProcessUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OcrserviceServer).ProcessUpload(&ocrserviceProcessUploadServer{stream})
}

type Ocrservice_ProcessUploadServer interface {
	Send(*OCRresponse) error
	Recv() (*OCRuploadFiles, error)
	grpc.ServerStream
}

type ocrserviceProcessUploadServer struct {
	grpc.ServerStream
}

func (x *ocrserviceProcessUploadServer) Send(m *OCRresponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ocrserviceProcessUploadServer) Recv() (*OCRuploadFiles, error) {
	m := new(OCRuploadFiles)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Ocrservice_ServiceDesc is the grpc.ServiceDesc for Ocrservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ocrservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocrservice.ocrservice",
	HandlerType: (*OcrserviceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessInfra",
			Handler:       _Ocrservice_ProcessInfra_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ProcessBatch",
			Handler:       _Ocrservice_ProcessBatch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ProcessUpload",
			Handler:       _Ocrservice_ProcessUpload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/ocrservice_go.proto",
}
