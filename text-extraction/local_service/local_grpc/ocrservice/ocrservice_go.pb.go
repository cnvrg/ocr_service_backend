// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: protos/ocrservice_go.proto

package ocrservice

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ocr response status
type OCRretunStatus int32

const (
	OCRretunStatus_sucess      OCRretunStatus = 0
	OCRretunStatus_s3_error    OCRretunStatus = 1
	OCRretunStatus_file_error  OCRretunStatus = 2
	OCRretunStatus_other_error OCRretunStatus = 3
)

// Enum value maps for OCRretunStatus.
var (
	OCRretunStatus_name = map[int32]string{
		0: "sucess",
		1: "s3_error",
		2: "file_error",
		3: "other_error",
	}
	OCRretunStatus_value = map[string]int32{
		"sucess":      0,
		"s3_error":    1,
		"file_error":  2,
		"other_error": 3,
	}
)

func (x OCRretunStatus) Enum() *OCRretunStatus {
	p := new(OCRretunStatus)
	*p = x
	return p
}

func (x OCRretunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OCRretunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ocrservice_go_proto_enumTypes[0].Descriptor()
}

func (OCRretunStatus) Type() protoreflect.EnumType {
	return &file_protos_ocrservice_go_proto_enumTypes[0]
}

func (x OCRretunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OCRretunStatus.Descriptor instead.
func (OCRretunStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_ocrservice_go_proto_rawDescGZIP(), []int{0}
}

type S3Env struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwsAccessKeyId     string `protobuf:"bytes,1,opt,name=aws_access_key_id,json=awsAccessKeyId,proto3" json:"aws_access_key_id,omitempty"`
	AwsSecretAccessKey string `protobuf:"bytes,2,opt,name=aws_secret_access_key,json=awsSecretAccessKey,proto3" json:"aws_secret_access_key,omitempty"`
}

func (x *S3Env) Reset() {
	*x = S3Env{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ocrservice_go_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Env) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Env) ProtoMessage() {}

func (x *S3Env) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ocrservice_go_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Env.ProtoReflect.Descriptor instead.
func (*S3Env) Descriptor() ([]byte, []int) {
	return file_protos_ocrservice_go_proto_rawDescGZIP(), []int{0}
}

func (x *S3Env) GetAwsAccessKeyId() string {
	if x != nil {
		return x.AwsAccessKeyId
	}
	return ""
}

func (x *S3Env) GetAwsSecretAccessKey() string {
	if x != nil {
		return x.AwsSecretAccessKey
	}
	return ""
}

type S3Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint   string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Command    string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Bucketname string `protobuf:"bytes,3,opt,name=bucketname,proto3" json:"bucketname,omitempty"`
	File       string `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	Prefix     string `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Localdir   string `protobuf:"bytes,6,opt,name=localdir,proto3" json:"localdir,omitempty"`
}

func (x *S3Args) Reset() {
	*x = S3Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ocrservice_go_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Args) ProtoMessage() {}

func (x *S3Args) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ocrservice_go_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Args.ProtoReflect.Descriptor instead.
func (*S3Args) Descriptor() ([]byte, []int) {
	return file_protos_ocrservice_go_proto_rawDescGZIP(), []int{1}
}

func (x *S3Args) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *S3Args) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *S3Args) GetBucketname() string {
	if x != nil {
		return x.Bucketname
	}
	return ""
}

func (x *S3Args) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *S3Args) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *S3Args) GetLocaldir() string {
	if x != nil {
		return x.Localdir
	}
	return ""
}

type S3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args *S3Args `protobuf:"bytes,1,opt,name=args,proto3" json:"args,omitempty"`
	Env  *S3Env  `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
}

func (x *S3Request) Reset() {
	*x = S3Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ocrservice_go_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Request) ProtoMessage() {}

func (x *S3Request) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ocrservice_go_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Request.ProtoReflect.Descriptor instead.
func (*S3Request) Descriptor() ([]byte, []int) {
	return file_protos_ocrservice_go_proto_rawDescGZIP(), []int{2}
}

func (x *S3Request) GetArgs() *S3Args {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *S3Request) GetEnv() *S3Env {
	if x != nil {
		return x.Env
	}
	return nil
}

// S3 request message
type S3Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *S3Args  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Status  int32    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Files   []string `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *S3Response) Reset() {
	*x = S3Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ocrservice_go_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Response) ProtoMessage() {}

func (x *S3Response) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ocrservice_go_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Response.ProtoReflect.Descriptor instead.
func (*S3Response) Descriptor() ([]byte, []int) {
	return file_protos_ocrservice_go_proto_rawDescGZIP(), []int{3}
}

func (x *S3Response) GetRequest() *S3Args {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *S3Response) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *S3Response) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

// direct file request
type OCRrequestInference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S3Info   *S3Request `protobuf:"bytes,1,opt,name=s3Info,proto3" json:"s3Info,omitempty"`
	Filename []string   `protobuf:"bytes,2,rep,name=filename,proto3" json:"filename,omitempty"`
	Httplink []string   `protobuf:"bytes,3,rep,name=httplink,proto3" json:"httplink,omitempty"`
}

func (x *OCRrequestInference) Reset() {
	*x = OCRrequestInference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ocrservice_go_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCRrequestInference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCRrequestInference) ProtoMessage() {}

func (x *OCRrequestInference) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ocrservice_go_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCRrequestInference.ProtoReflect.Descriptor instead.
func (*OCRrequestInference) Descriptor() ([]byte, []int) {
	return file_protos_ocrservice_go_proto_rawDescGZIP(), []int{4}
}

func (x *OCRrequestInference) GetS3Info() *S3Request {
	if x != nil {
		return x.S3Info
	}
	return nil
}

func (x *OCRrequestInference) GetFilename() []string {
	if x != nil {
		return x.Filename
	}
	return nil
}

func (x *OCRrequestInference) GetHttplink() []string {
	if x != nil {
		return x.Httplink
	}
	return nil
}

// batch file request
type OCRrequestBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S3Info   *S3Request `protobuf:"bytes,1,opt,name=s3Info,proto3" json:"s3Info,omitempty"`
	Filename []string   `protobuf:"bytes,2,rep,name=filename,proto3" json:"filename,omitempty"`
	Httplink []string   `protobuf:"bytes,3,rep,name=httplink,proto3" json:"httplink,omitempty"`
}

func (x *OCRrequestBatch) Reset() {
	*x = OCRrequestBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ocrservice_go_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCRrequestBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCRrequestBatch) ProtoMessage() {}

func (x *OCRrequestBatch) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ocrservice_go_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCRrequestBatch.ProtoReflect.Descriptor instead.
func (*OCRrequestBatch) Descriptor() ([]byte, []int) {
	return file_protos_ocrservice_go_proto_rawDescGZIP(), []int{5}
}

func (x *OCRrequestBatch) GetS3Info() *S3Request {
	if x != nil {
		return x.S3Info
	}
	return nil
}

func (x *OCRrequestBatch) GetFilename() []string {
	if x != nil {
		return x.Filename
	}
	return nil
}

func (x *OCRrequestBatch) GetHttplink() []string {
	if x != nil {
		return x.Httplink
	}
	return nil
}

// stream upload file request
type OCRuploadFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FileInfo:
	//
	//	*OCRuploadFiles_Filename
	//	*OCRuploadFiles_Data
	FileInfo isOCRuploadFiles_FileInfo `protobuf_oneof:"file_info"`
}

func (x *OCRuploadFiles) Reset() {
	*x = OCRuploadFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ocrservice_go_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCRuploadFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCRuploadFiles) ProtoMessage() {}

func (x *OCRuploadFiles) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ocrservice_go_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCRuploadFiles.ProtoReflect.Descriptor instead.
func (*OCRuploadFiles) Descriptor() ([]byte, []int) {
	return file_protos_ocrservice_go_proto_rawDescGZIP(), []int{6}
}

func (m *OCRuploadFiles) GetFileInfo() isOCRuploadFiles_FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

func (x *OCRuploadFiles) GetFilename() string {
	if x, ok := x.GetFileInfo().(*OCRuploadFiles_Filename); ok {
		return x.Filename
	}
	return ""
}

func (x *OCRuploadFiles) GetData() []byte {
	if x, ok := x.GetFileInfo().(*OCRuploadFiles_Data); ok {
		return x.Data
	}
	return nil
}

type isOCRuploadFiles_FileInfo interface {
	isOCRuploadFiles_FileInfo()
}

type OCRuploadFiles_Filename struct {
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3,oneof"`
}

type OCRuploadFiles_Data struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*OCRuploadFiles_Filename) isOCRuploadFiles_FileInfo() {}

func (*OCRuploadFiles_Data) isOCRuploadFiles_FileInfo() {}

type OCRresponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status OCRretunStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ocrservice.OCRretunStatus" json:"status,omitempty"`
	Data   []byte         `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OCRresponse) Reset() {
	*x = OCRresponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ocrservice_go_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCRresponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCRresponse) ProtoMessage() {}

func (x *OCRresponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ocrservice_go_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCRresponse.ProtoReflect.Descriptor instead.
func (*OCRresponse) Descriptor() ([]byte, []int) {
	return file_protos_ocrservice_go_proto_rawDescGZIP(), []int{7}
}

func (x *OCRresponse) GetStatus() OCRretunStatus {
	if x != nil {
		return x.Status
	}
	return OCRretunStatus_sucess
}

func (x *OCRresponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_protos_ocrservice_go_proto protoreflect.FileDescriptor

var file_protos_ocrservice_go_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x63, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x63,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x65, 0x0a, 0x05, 0x53, 0x33, 0x65, 0x6e,
	0x76, 0x12, 0x29, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x77,
	0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15,
	0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x77, 0x73,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x22,
	0xa6, 0x01, 0x0a, 0x06, 0x53, 0x33, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x64, 0x69, 0x72, 0x22, 0x58, 0x0a, 0x09, 0x53, 0x33, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x63, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x33, 0x61, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x23, 0x0a,
	0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x63, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x33, 0x65, 0x6e, 0x76, 0x52, 0x03, 0x65,
	0x6e, 0x76, 0x22, 0x68, 0x0a, 0x0a, 0x53, 0x33, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x63, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x33, 0x61, 0x72, 0x67, 0x73, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x7c, 0x0a, 0x13,
	0x4f, 0x43, 0x52, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x63, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x33, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x73, 0x33, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x78, 0x0a, 0x0f, 0x4f, 0x43,
	0x52, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2d, 0x0a,
	0x06, 0x73, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6f, 0x63, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x33, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x73, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x51, 0x0a, 0x0e, 0x4f, 0x43, 0x52, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x0b, 0x4f, 0x43, 0x52, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x43, 0x52, 0x72, 0x65, 0x74, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x4b,
	0x0a, 0x0e, 0x4f, 0x43, 0x52, 0x72, 0x65, 0x74, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0a, 0x0a, 0x06, 0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x73, 0x33, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x32, 0xf0, 0x01, 0x0a, 0x0a,
	0x6f, 0x63, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x12, 0x1f, 0x2e, 0x6f, 0x63, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x43, 0x52, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x17, 0x2e, 0x6f, 0x63,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x43, 0x52, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x6f, 0x63, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x43, 0x52, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x17, 0x2e, 0x6f, 0x63, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4f, 0x43, 0x52, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x4a, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x1a, 0x2e, 0x6f, 0x63, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4f, 0x43, 0x52, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a,
	0x17, 0x2e, 0x6f, 0x63, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x43, 0x52,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x41,
	0x0a, 0x18, 0x69, 0x6f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e,
	0x6f, 0x63, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x6f, 0x63, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0c, 0x2e,
	0x2f, 0x6f, 0x63, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x4f, 0x43,
	0x52, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_ocrservice_go_proto_rawDescOnce sync.Once
	file_protos_ocrservice_go_proto_rawDescData = file_protos_ocrservice_go_proto_rawDesc
)

func file_protos_ocrservice_go_proto_rawDescGZIP() []byte {
	file_protos_ocrservice_go_proto_rawDescOnce.Do(func() {
		file_protos_ocrservice_go_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_ocrservice_go_proto_rawDescData)
	})
	return file_protos_ocrservice_go_proto_rawDescData
}

var file_protos_ocrservice_go_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protos_ocrservice_go_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_protos_ocrservice_go_proto_goTypes = []interface{}{
	(OCRretunStatus)(0),         // 0: ocrservice.OCRretunStatus
	(*S3Env)(nil),               // 1: ocrservice.S3env
	(*S3Args)(nil),              // 2: ocrservice.S3args
	(*S3Request)(nil),           // 3: ocrservice.S3request
	(*S3Response)(nil),          // 4: ocrservice.S3response
	(*OCRrequestInference)(nil), // 5: ocrservice.OCRrequestInference
	(*OCRrequestBatch)(nil),     // 6: ocrservice.OCRrequestBatch
	(*OCRuploadFiles)(nil),      // 7: ocrservice.OCRuploadFiles
	(*OCRresponse)(nil),         // 8: ocrservice.OCRresponse
}
var file_protos_ocrservice_go_proto_depIdxs = []int32{
	2, // 0: ocrservice.S3request.args:type_name -> ocrservice.S3args
	1, // 1: ocrservice.S3request.env:type_name -> ocrservice.S3env
	2, // 2: ocrservice.S3response.request:type_name -> ocrservice.S3args
	3, // 3: ocrservice.OCRrequestInference.s3Info:type_name -> ocrservice.S3request
	3, // 4: ocrservice.OCRrequestBatch.s3Info:type_name -> ocrservice.S3request
	0, // 5: ocrservice.OCRresponse.status:type_name -> ocrservice.OCRretunStatus
	5, // 6: ocrservice.ocrservice.ProcessInfra:input_type -> ocrservice.OCRrequestInference
	6, // 7: ocrservice.ocrservice.ProcessBatch:input_type -> ocrservice.OCRrequestBatch
	7, // 8: ocrservice.ocrservice.ProcessUpload:input_type -> ocrservice.OCRuploadFiles
	8, // 9: ocrservice.ocrservice.ProcessInfra:output_type -> ocrservice.OCRresponse
	8, // 10: ocrservice.ocrservice.ProcessBatch:output_type -> ocrservice.OCRresponse
	8, // 11: ocrservice.ocrservice.ProcessUpload:output_type -> ocrservice.OCRresponse
	9, // [9:12] is the sub-list for method output_type
	6, // [6:9] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_protos_ocrservice_go_proto_init() }
func file_protos_ocrservice_go_proto_init() {
	if File_protos_ocrservice_go_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_ocrservice_go_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Env); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ocrservice_go_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ocrservice_go_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ocrservice_go_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ocrservice_go_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCRrequestInference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ocrservice_go_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCRrequestBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ocrservice_go_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCRuploadFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ocrservice_go_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCRresponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_ocrservice_go_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*OCRuploadFiles_Filename)(nil),
		(*OCRuploadFiles_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_ocrservice_go_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_ocrservice_go_proto_goTypes,
		DependencyIndexes: file_protos_ocrservice_go_proto_depIdxs,
		EnumInfos:         file_protos_ocrservice_go_proto_enumTypes,
		MessageInfos:      file_protos_ocrservice_go_proto_msgTypes,
	}.Build()
	File_protos_ocrservice_go_proto = out.File
	file_protos_ocrservice_go_proto_rawDesc = nil
	file_protos_ocrservice_go_proto_goTypes = nil
	file_protos_ocrservice_go_proto_depIdxs = nil
}
